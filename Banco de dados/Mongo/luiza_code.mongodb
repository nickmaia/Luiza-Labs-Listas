// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.


// Parte que estava no slide.

//const database = 'luiza_code'

//use(database)   cria e/ou altera para o banco

//db.createCollection("products"); //cria uma nova coleção

//db.createCollection("clients"); //cria uma nova coleção

//db.createCollection("wishlists"); //cria uma nova coleção

//db.nomedacollection.drop() //deleta uma coleção





// ----- 1. CREATE -----/

/* Operações de criação:

As operações de criação ou inserção adicionam novos documentos a uma coleção. 
Se a coleção não existir no momento, as operações de inserção criarão a coleção. 

Inseri apenas um campo na coleção:
    >> db.collection.insertOne({nome: “Luiza”, idade: 30, estudante: false})

Inseri varios campos na coleção:
    >> db.collection.insertMany([
    {},
    {}
    ])

*/

// Insert a few documents into the sales collection.
    use('luiza_code');
    db.clients.insertMany([
        { '_id': 1,'name': 'Luiza', 'email': 'Luiza@gmail.com'},
        { '_id': 2,'name': 'Maria', 'email': 'Maria@gmail.com'},
        { '_id': 3,'name': 'João', 'email': 'João@gmail.com'},
        { '_id': 4,'name': 'José', 'email': 'José@gmail.com'}
    ]);

    use('luiza_code');
    db.clients.insertOne(
        {'name': 'Gabi', 'email': 'Gabi@gmail.com'}
    );

    use('luiza_code');
    db.products.insertMany([
        {'_id': 101, 'name': 'Notebook', 'price': 5780.00, 'quantity': 18, 'updated_at': new Date() },
        {'_id': 102, 'name': 'Mouse', 'price': 80.00, 'quantity': 56, 'updated_at': new Date() },
        {'_id': 103, 'name': 'Teclado', 'price': 200.00, 'quantity': 21, 'updated_at': new Date() },
        {'_id': 104, 'name': 'Mousepad', 'price': 50.00, 'quantity': 12, 'updated_at': new Date() },
        {'_id': 105, 'name': 'Iphone', 'price': 7200.00, 'quantity': 12, 'updated_at': new Date() }
    ]);

    use('luiza_code');
    db.wishlists.insertMany([
        {'_id': 456, 'name': 'Favorita1', 'client_id': 2, 'id_products': [105]},
        {'_id': 457, 'name': 'Melhores', 'client_id': 3, 'id_products': [101, 105]},
        {'_id': 458, 'name': 'FavoritaLu', 'client_id': 1, 'id_products': [101, 102]},
        {'_id': 459, 'name': 'FavoritaLu2', 'client_id': 1, 'id_products': [105]},
        {'_id': 460, 'name': 'Gamer', 'client_id': 4, 'id_products': [101, 102, 103, 104]}
    ]);


// -----  2. READ -------

/* Operações de leitura 01:

    As operações de leitura recuperam documentos de uma coleção ; ou seja, consultar uma coleção de documentos. 
    O MongoDB fornece os seguintes métodos para ler documentos de uma coleção:
    
    >> db.collection.find()

    Resposta: 
    { '_id': 3, 'name': 'Luiza', 'email': 'luiza@gmail.com'}

    Para indentá-lo facilitando uma melhor leitura podemos usar o método pretty.
    
    >> db.clients.find().pretty()

    Resposta:
    { 
    '_id': 3, 
    'name': 'Luiza', 
    'email': 'luiza@gmail.com'
    }

    O campo _id, esse é o identificador de nosso documento, quando não o passamos por parâmetro no find, o próprio Mongo o cria.
    O método findOne que retorna somente 1 documento, aquele com a característica mais próxima a busca referenciada. 
    Sua sintaxe é a mesma do método find.

    Projection:
    O projection é um objeto que passamos como parâmetro do find, com o intuito de obter somente do document os campos que precisamos, isso é muito útil
    quando temos documentos com inúmeros campos e precisamos tratar somente alguns dados, isso é ótimo para a performance.
            
            db.usuarios.find(
            {_id:3},
            { _id:0, usuario:1, senha:1 }
            )

    O projection retorna somente os campos em que setamos como 1 ou true, não é preciso colocar todos os campos do document no objeto como true ou false, se
    você não irá precisar do campo _id então você deve setá-lo como 0 ou false, pois por padrão ele é tido como true, é importante a remoção do campo _id quando 
    não for usá-lo até mesmo por uma questão de segurança.

 */
    use('luiza_code');
    db.clients.find({_id: ObjectId("626b2e144a4b2c867dc01957")});

    use('luiza_code');
    db.clients.find().pretty()

    use('luiza_code');
    db.products.find().pretty()

    use('luiza_code');
    db.wishlists.find().pretty()




    // Operações de leitura 02:
    /*
    Existem alguns tipos de chaves que usamos como uma espécie de filtros para o find, como por exemplo:

    gt (greater than) maior que
    gte (greater than or equals) maior ou igual a
    lt (less than) menor que
    lte (less than or equals) menor ou igual a

            db.alunos.find(
            { notas.matematica: {$gte: 70} }
            )
     */
    use('luiza_code');
    db.products.find(
        {price: {$gte:5000}}
    )

    use('luiza_code');
    db.products.find(
        {price: {$lte: 5000}}
    )

    use('luiza_code');
    db.products.find(
        {price: 200.00}
    )





 // Operações de leitura 03:
/* Regex
 */

    // clientes que possuem a letra "e" em algum lugar do nome
    use('luiza_code');
    db.clients.find(
        { nome: {$regex: "e"} }
        )

    // clientes que começam com a letra J
    use('luiza_code');
    db.clients.find(
        {name: {$regex: "^J"}}
    );

    // clientes que terminam com a letra a
    use('luiza_code');
    db.clients.find(
        {name: {$regex: "a$"}}
    );







// Operações de leitura 04:
    /* operadores lógicos e / ou:
        Os operadores lógicos são representados pela sintaxe $and / $or e requerem um array, dentro desse array são passadas todas 
        as condições para serem analisadas. O operador $and retorna o documento buscado, somente se todas as queries passadas forem verdadeiras. 
        E o operador $or retorna o documento se pelo menos uma query for verdadeira.

        informação útil:
        Campo de email em seu document:
            email: {$exists: true}
     */
    use('luiza_code');
    db.products.find(
        {
            $or: [
                { price: {$gte: 5000.00}}, {quantity:12}
            ]
        }
    );

    use('luiza_code');
    db.products.find(
        {
            $and: [
                { price: {$gte: 5000.00}}, {quantity: {$gte:15}}
            ]
        }
    );


    use('luiza_code');
    db.products.find(
        {
            $and: [
                {price: {$lte: 5000}}, {quantity: {$gte: 10} }
            ]
        }
    )


// Operações de leitura 05:
/*
operadores all / in
Esses operadores existem para trabalharmos com arrays.
O operador $all retorna o documento se todos os itens procurados estiverem contidos na query. 
E o operador $in varre o array mostrando os documents que contenham algum dos itens especificados.
 */
    // operadores all = and no python 
    use('luiza_code');
    db.wishlists.find(
        {id_products: {$all: [101, 105]} }
    );
    // in = or ou for no python in tras do 101 até o 105
    use('luiza_code');
    db.wishlists.find(
        {id_products: {$in: [101, 105]} }
    )




// Operações de leitura 06:
    // limit = limita a quantidade de resposta para a busca
    use('luiza_code');
    db.wishlists.find(
        {id_products: {$in: [101, 105]} }
    ).limit(1)

// Operações de leitura 06:
    // sort ordena o banco de dados, 1 crescente ou -1 decrescente
    use('luiza_code');
    db.products.find().sort({"price": -1});



// -----  3. Update -------

/* Operações de atualização:
As operações de atualização modificam os documentos existentes em uma coleção.

    >> db.pessoas.update(
    {nome: Luiza},
    {nome: 'Luiza Magalu', english: true}
    )

A função update recebe dois objetos como parâmetro, o primeiro é a query para 
busca, e o segundo objeto é o replace, ou seja, são os dados que substituirão aquele document.
*/

  
/* set:
O operador set é usado quando queremos evitar que a substituição inteira do document aconteça, ou seja, 
quando queremos acrescentar e / ou alterar somente alguns campos no document, sem apagar todos os outros. 
    >> db.pessoas.update(
    { nome: Luiza },
    { $set: {idade:22} }
    )

- updateMany atualiza todos os campo.
- updateOne atualiza somente um campo.
- upsert se não encontrar ninguem para atualizar, o campo é inserido.

Você pode especificar critérios, ou filtros, que identificam os documentos a serem atualizados. Esses filtros usam a mesma sintaxe das operações de leitura
    
    use('luiza_code');
    db.users.updateMany(
        { age: {$lt: 18}},
        { $set:  {status: "reject"}}
    );

Operações de atualização:

Campos:

$currentDate Define o valor de um campo para a data atual, como uma data ou um carimbo de data/hora.
$inc Incrementa o valor do campo pelo valor especificado.
$min Atualiza o campo apenas se o valor especificado for menor que o valor do campo existente.
$max Atualiza o campo apenas se o valor especificado for maior que o valor do campo existente.
$mul Multiplica o valor do campo pelo valor especificado.
$rename Renomeia um campo.
$set Define o valor de um campo em um documento.
$setOnInsert Define o valor de um campo se uma atualização resultar na inserção de um documento. Não tem efeito nas operações de atualização que modificam documentos existentes.
$unset Remove o campo especificado de um documento

*/
    use('luiza_code');
    db.products.update(
        { _id: 101},
        { $set:  {'price': 5750.00}}
    );

    //Cria um novo document, caso não exista nenhum com as características passadas.
    use('luiza_code');
    db.products.updateOne(
        { _id: 107},
        { $set:  {'price': 5780.00}}, 
        { upsert: true}
    );

    // Remove os campos especificados nele. Ou seja, remove o campo price no id:105
    use('luiza_code');
    db.products.update(
        { _id: 105},
        { $unset: {price: 5780.00}}
    )



// 4. Delete
    // As operações de exclusão removem documentos de uma coleção.

    //Deleta tudo
    use('luiza_code');
    db.products.deleteMany(
        {_id: 107}
    );

    // Deleta apenas o campo chamado
    use('luiza_code');
    db.products.deleteOne(
        {_id: 105}
    );



// 5. Agregações:

/*
As operações de agregação processam vários documentos e retornam os resultados calculados. Você pode usar operações de agregação para:
    ● Agrupe valores de vários documentos juntos.
    ● Execute operações nos dados agrupados para retornar um único resultado.
    ● Analise as mudanças de dados ao longo do tempo.
$group agrupa elementos
$sort não é obrigatorio (Organiza os documentos em ordem crescente ou decrescente)
aggregate é igual a agrupamento




Pipelines de agregação:

Um pipeline de agregação consiste em um ou mais estágios que processam documentos:
● Cada estágio realiza uma operação nos documentos de entrada. Por exemplo, um estágio pode filtrar documentos, agrupar documentos e calcular valores.
● Os documentos que saem de um estágio são passados ​para o próximo estágio.
● Um pipeline de agregação pode retornar resultados para grupos de documentos. Por exemplo, retorne os valores total, médio, máximo e mínimo.



O exemplo de pipeline de agregação a seguir contém dois estágios e retorna a quantidade total do pedido de pizzas de tamanho médio agrupadas por nome de pizza:

db.orders.aggregate( [
// Stage 1: Filter pizza order documents by pizza size
{
$match: { size: "medium" }
},
// Stage 2: Group remaining documents by pizza name and calculate total quantity
{
$group: { _id: "$name", totalQuantity: { $sum: "$quantity" } }
}
] )


O estágio $match:
Filtra os documentos do pedido de pizza para pizzas size com medium.
Passa os demais documentos para o estágio $group.

O estágio $group:
Agrupa os documentos restantes por pizza name.
Usa $sum para calcular o pedido total quantity de cada pizza name. O total é armazenado no totalQuantitycampo retornado pelo pipeline de agregação.


*/
    use('luiza_code');
    db.products.aggregate(
        [
            {
                $group: {
                    '_id': {},
                    'min_price': {$min: '$price'}, 
                    'max_price': {$max: '$price'}, 
                    'sum_price': {$sum: '$price'}, 
                    'avg_price': {$avg: '$price'},
                    'total_quantity': {$sum: '$quantity'}
                }
            },
            { 
                $sort: {_id:1}
            }
        ]
    );

    //db.wishlists.find() pesquisa na wishlists
    use('luiza_code');
    db.wishlists.find()

    use('luiza_code');
    db.wishlists.aggregate(
        [
            { //filter
                $match:{'id_products': 101}
            },
            {
                $group: {'_id':
                {
                    'client_id': '$client_id'          
                }
                },
            },
            { 
                $sort: {'_id.client_id':1}
            }
        ]
    );

    //relacionamento entre coleções
    use('luiza_code');
    db.wishlists.aggregate([
            {
                $lookup: {
                    from: "clients",
                    localField: "client_id",
                    foreignField: "_id",
                    as: "client"
            }
        }
    ]).pretty();

    use('luiza_code');
    db.wishlists.aggregate([
        {
            $lookup: {
                from: "products",
                localField: "id_products",
                foreignField: "_id",
                as: "products"
            }
        }
    ]).pretty()

//Métodos de agregação de propósito único:

//Você pode usar os seguintes métodos de agregação de propósito único para agregar documentos de uma única coleção:

    //Retorna uma contagem aproximada dos documentos em uma coleção ou exibição.
    use('luiza_code');
    db.collection.estimatedDocumentCount();

    //Retorna uma contagem do número de documentos em uma coleção ou exibição.
    use('luiza_code');
    db.products.count();

    //Retorna uma matriz de documentos que possuem valores distintos para o campo especificado.
    use('luiza_code');
    db.wishlists.distinct('client_id');



// 6. Bônus (Index)
    use('luiza_code');
    db.products.find(
        {name: "Notebook"}
    ).explain();


    use('luiza_code');
    db.products.createIndex(
        {name:1}
    )

    use('luiza_code');
    db.products.dropIndex("name_1");

    use('luiza_code');
    db.products.find(
        {name: "Notebook"}
    ).explain()